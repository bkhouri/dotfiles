#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_"
}

# Colorized man pages, from:
# http://boredzo.org/blog/archives/2016-08-15/colorized-man-pages-understood-and-customized
man() {
    env \
        LESS_TERMCAP_md=$(printf "\e[1;36m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

# Reference: https://github.com/chubin/wttr.in
function wttr() {
    # change Ottawa to your default location
    local request="wttr.in/${1-Ottawa}"
    [ "$COLUMNS" -lt 125 ] && request+='?n'
    curl -H "Accept-Language: ${LANG%_*}" --compressed "$request"
}

# function exit() {
#     read -t5 -n 1 -p "Do you really wish to exit? [Y/n] " should_exit || should_exit=y
#     case $should_exit in
#         [Yy] ) builtin exit $@ ;;
#         "" ) builtin exit $@ ;;
#         * ) printf "\n" ;;
#     esac
# }

function getAbsolutePath() {
    if [ -n "$1" ]; then
        if [ -d "${1}" ]; then
            LOCAL_VARIABLE="${1}" && echo $(cd "$LOCAL_VARIABLE" && pwd -P)
        else
            LOCAL_VARIABLE="${1}" && echo $(cd $(dirname "$LOCAL_VARIABLE") && pwd -P)/$(basename "$LOCAL_VARIABLE")
        fi
    fi
}

# Bazel Related functions
nuke-folder() {
    if diskutil apfs listSnapshots $1; then
        if ! diskutil apfs deleteVolume $1; then
            echo "Are you are still running bazel (if so, try 'bazel shutdown' first)?"
            return 1
        fi
    fi
    set -x
    machine=$(uname -m)
    if [[ "$machine" == "arm64" ]]; then
        disk="/dev/disk3"
    else
        disk="/dev/disk1"
    fi
    diskutil_args=("apfs" "addVolume" "$disk" "APFS" "$1")
    [[ ! -z "$2" ]] && diskutil_args+=("-quota" "$2")
    diskutil "${diskutil_args[@]}"
    cd /Volumes/$1
    sudo rm -rf .{,_.}{fseventsd,Spotlight-V*,Trashes}
    sudo mkdir .fseventsd
    sudo touch .fseventsd/no_log .fseventsd/ignore .metadata_never_index .Trashes
    cd - >/dev/null
    diskutil unmount $1
    diskutil mount $1
    sudo mdutil -i off -d /Volumes/$1
    sudo rm /Volumes/$1/.fseventsd/00*
    set +x
    return 0
}

nuke-bazel-out() {
    # prep-bazel-folder BazelOut "$@"
    nuke-folder BazelOut 512g
}
nuke-bazel-repo-cache() {
    # prep-bazel-folder BazelRepoCache "$@"
    nuke-folder BazelRepoCache 100g
}
nuke-bazel-disk-cache() {
    # prep-bazel-folder BazelDiskCache "$@"
    nuke-folder BazelDiskCache 512g
}

#### Git stuff

function git_create_branch() {
    if [ -z "$1" ]; then
        echo "*******************************************"
        echo "*   !!! WARNING !!!  Branch not created   *"
        echo "*******************************************"
        echo ""
        echo "Silly me!!! I need to specify a parameter, the branch.."
    else
        current_branch=$(git symbolic-ref HEAD 2> /dev/null | awk 'BEGIN{FS="/"} {print $NF}')
        set -x
        git checkout --track -b $1
        if [ $? -eq 0 ]; then
            git push --set-upstream origin $1
            if [ $? -ne 0 ]; then
                git checkout ${current_branch}
                git branch -D $1
            fi
        fi
        set +x
    fi
}

# # Change working directory to the top-most Finder window location
# function cdf() { # short for `cdfinder`
# 	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
# }

# # Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
# function targz() {
# 	local tmpFile="${@%/}.tar";
# 	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;
#
# 	size=$(
# 		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
# 		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
# 	);
#
# 	local cmd="";
# 	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
# 		# the .tar file is smaller than 50 MB and Zopfli is available; use it
# 		cmd="zopfli";
# 	else
# 		if hash pigz 2> /dev/null; then
# 			cmd="pigz";
# 		else
# 			cmd="gzip";
# 		fi;
# 	fi;
#
# 	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
# 	"${cmd}" -v "${tmpFile}" || return 1;
# 	[ -f "${tmpFile}" ] && rm "${tmpFile}";
#
# 	zippedSize=$(
# 		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
# 		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
# 	);
#
# 	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
# }

# # Determine size of a file or total size of a directory
# function fs() {
# 	if du -b /dev/null > /dev/null 2>&1; then
# 		local arg=-sbh;
# 	else
# 		local arg=-sh;
# 	fi
# 	if [[ -n "$@" ]]; then
# 		du ${arg} -- $@;
# 	else
# 		du ${arg} .[^.]* ./*;
# 	fi;
# }

# # Use Git’s colored diff when available
# hash git &>/dev/null;
# if [ $? -eq 0 ]; then
# 	function diff() {
# 		git diff --no-index --color-words "$@";
# 	}
# fi;

# # Create a data URL from a file
# function dataurl() {
# 	local mimeType=$(file -b --mime-type "$1");
# 	if [[ $mimeType == text/* ]]; then
# 		mimeType="${mimeType};charset=utf-8";
# 	fi
# 	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
# }

# # Start an HTTP server from a directory, optionally specifying the port
# function server() {
# 	local port="${1:-8000}";
# 	sleep 1 && open "http://localhost:${port}/" &
# 	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
# 	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
# 	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
# }

# # Start a PHP server from a directory, optionally specifying the port
# # (Requires PHP 5.4.0+.)
# function phpserver() {
# 	local port="${1:-4000}";
# 	local ip=$(ipconfig getifaddr en1);
# 	sleep 1 && open "http://${ip}:${port}/" &
# 	php -S "${ip}:${port}";
# }

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c <"$1")
    local gzipsize=$(gzip -c "$1" | wc -c)
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# # Run `dig` and display the most useful info
# function digga() {
# 	dig +nocmd "$1" any +multiline +noall +answer;
# }

# # Show all the names (CNs and SANs) listed in the SSL certificate
# # for a given domain
# function getcertnames() {
# 	if [ -z "${1}" ]; then
# 		echo "ERROR: No domain specified.";
# 		return 1;
# 	fi;
#
# 	local domain="${1}";
# 	echo "Testing ${domain}…";
# 	echo ""; # newline
#
# 	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
# 		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);
#
# 	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
# 		local certText=$(echo "${tmp}" \
# 			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
# 			no_serial, no_sigdump, no_signame, no_validity, no_version");
# 		echo "Common Name:";
# 		echo ""; # newline
# 		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
# 		echo ""; # newline
# 		echo "Subject Alternative Name(s):";
# 		echo ""; # newline
# 		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
# 			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
# 		return 0;
# 	else
# 		echo "ERROR: Certificate not found.";
# 		return 1;
# 	fi;
# }

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
    if grep -q Microsoft /proc/version; then
        # Ubuntu on Windows using the Linux subsystem
        alias open='explorer.exe'
    else
        alias open='xdg-open'
    fi
fi

# # `o` with no arguments opens the current directory, otherwise opens the given
# # location
# function o() {
# 	if [ $# -eq 0 ]; then
# 		open .;
# 	else
# 		open "$@";
# 	fi;
# }

# # `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# # the `.git` directory, listing directories first. The output gets piped into
# # `less` with options to preserve color and line numbers, unless the output is
# # small enough for one screen.
# function tre() {
# 	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
# }

# Bookmarks
#https://threkk.medium.com/how-to-use-bookmarks-in-bash-zsh-6b8074e40774
if [ -d "${HOME}/.bookmarks" ]; then
    export CDPATH=".:$HOME/.bookmarks:/"
    alias goto="cd -P"
fi
