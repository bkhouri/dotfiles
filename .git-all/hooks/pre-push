#!/bin/sh -x

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

set +e
REPO_ROOT=${PWD}
COLOR_FILE=${REPO_ROOT}/pipelines/setup-color.sh

message=()
if [ -z "${SKIP+x}" ] && [ -n "$(command bazel)" ] ; then
    char=*
    line=${char}${char}${char}${char}${char}${char}${char}${char}
    line=${line}${line}${line}${line}${line}${line}${line}${line}
    [ -f "${COLOR_FILE}" ] && source ${COLOR_FILE}
    for config in titanos-arm64 darwin-x86_64 #linux-x86_64
    do
        cat <<< "${bold}${standout}${line}${normal}"
        cat <<< "${bold}${standout}${char} Runing bazel.sh for config ${config}...${normal}"
        cat <<< "${bold}${standout}${line}${normal}"
        set -x
        CONFIG=${config} false && ${REPO_ROOT}/pipelines/bazel.sh
        rc=$?
        set +x
        if [ ${rc} -ne 0 ] ; then
            FAIL=true
            # err_message+=("${red}FAILED: pipelines/bazel.sh config ${config}${normal}")
            message+=("${bold}${red}FAILED: CONFIG=${config} pipelines/bazel.sh ${normal}")
        else
            message+=("${green}PASSED: CONFIG=${config} pipelines/bazel.sh${normal}")
        fi

    done
    # warning+=("${yellow}WARNING: Pre-push hook is not running linux-x86_64 config${normal}")
    message+=("${bold}${yellow}WARNING: Pre-push hook is not running linux-x86_64 config${normal}")
else
    cat <<< "${yellow}Skipping checks.${normal}"
fi

cat <<< ""
for msg in "${message[@]}"
do
    cat <<< $msg
done
if [ -n "${FAIL}" ] ; then
    exit 1
fi
exit 1
# z40=0000000000000000000000000000000000000000

# while read local_ref local_sha remote_ref remote_sha
# do
# 	if [ "$local_sha" = $z40 ]
# 	then
# 		# Handle delete
# 		:
# 	else
# 		if [ "$remote_sha" = $z40 ]
# 		then
# 			# New branch, examine all commits
# 			range="$local_sha"
# 		else
# 			# Update to existing branch, examine new commits
# 			range="$remote_sha..$local_sha"
# 		fi

# 		# Check for WIP commit
# 		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
# 		if [ -n "$commit" ]
# 		then
# 			echo >&2 "Found WIP commit in $local_ref, not pushing"
# 			exit 1
# 		fi
# 	fi
# done

exit 0
